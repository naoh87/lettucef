# comment out deprecated or ambiguous method
- underlying: RedisKeyAsyncCommands[K, V]
  output: KeyCommands
  methods:
  - fun: RedisFuture<Boolean> copy(K source, K destination);
  - fun: RedisFuture<Boolean> copy(K source, K destination, CopyArgs copyArgs);
  - fun: RedisFuture<Long> del(K... keys);
  - fun: RedisFuture<Long> unlink(K... keys);
  - fun: RedisFuture<byte[]> dump(K key);
    opt: [ nullable ]
  - fun: RedisFuture<Long> exists(K... keys);
  - fun: RedisFuture<Boolean> expire(K key, long seconds);
  - fun: RedisFuture<Boolean> expire(K key, Duration seconds);
  - fun: RedisFuture<Boolean> expireat(K key, long timestamp);
  - fun: RedisFuture<Boolean> expireat(K key, Date timestamp);
  - fun: RedisFuture<Boolean> expireat(K key, Instant timestamp);
  - fun: RedisFuture<List<K>> keys(K pattern);
  - fun: RedisFuture<Long> keys(KeyStreamingChannel<K> channel, K pattern);
    opt: [ ignore ]
  - fun: RedisFuture<String> migrate(String host, int port, K key, int db, long timeout);
  - fun: RedisFuture<String> migrate(String host, int port, int db, long timeout, MigrateArgs<K> migrateArgs);
  - fun: RedisFuture<Boolean> move(K key, int db);
  - fun: RedisFuture<String> objectEncoding(K key);
    opt: [ nullable ]
  - fun: RedisFuture<Long> objectFreq(K key);
  - fun: RedisFuture<Long> objectIdletime(K key);
  - fun: RedisFuture<Long> objectRefcount(K key);
  - fun: RedisFuture<Boolean> persist(K key);
  - fun: RedisFuture<Boolean> pexpire(K key, long milliseconds);
  - fun: RedisFuture<Boolean> pexpire(K key, Duration milliseconds);
  - fun: RedisFuture<Boolean> pexpireat(K key, long timestamp);
  - fun: RedisFuture<Boolean> pexpireat(K key, Date timestamp);
  - fun: RedisFuture<Boolean> pexpireat(K key, Instant timestamp);
  - fun: RedisFuture<Long> pttl(K key);
  - fun: RedisFuture<K> randomkey();
    opt: [ nullable ]
  - fun: RedisFuture<String> rename(K key, K newKey);
  - fun: RedisFuture<Boolean> renamenx(K key, K newKey);
  - fun: RedisFuture<String> restore(K key, long ttl, byte[] value);
  - fun: RedisFuture<String> restore(K key, byte[] value, RestoreArgs args);
  - fun: RedisFuture<List<V>> sort(K key);
  - fun: RedisFuture<Long> sort(ValueStreamingChannel<V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<List<V>> sort(K key, SortArgs sortArgs);
  - fun: RedisFuture<Long> sort(ValueStreamingChannel<V> channel, K key, SortArgs sortArgs);
    opt: [ ignore ]
  - fun: RedisFuture<Long> sortStore(K key, SortArgs sortArgs, K destination);
  - fun: RedisFuture<Long> touch(K... keys);
  - fun: RedisFuture<Long> ttl(K key);
  - fun: RedisFuture<String> type(K key);
  - fun: RedisFuture<KeyScanCursor<K>> scan();
  - fun: RedisFuture<KeyScanCursor<K>> scan(ScanArgs scanArgs);
  - fun: RedisFuture<KeyScanCursor<K>> scan(ScanCursor scanCursor, ScanArgs scanArgs);
  - fun: RedisFuture<KeyScanCursor<K>> scan(ScanCursor scanCursor);
  - fun: RedisFuture<StreamScanCursor> scan(KeyStreamingChannel<K> channel);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> scan(KeyStreamingChannel<K> channel, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> scan(KeyStreamingChannel<K> channel, ScanCursor scanCursor, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> scan(KeyStreamingChannel<K> channel, ScanCursor scanCursor);
    opt: [ ignore ]
  imports:
  - java.time.Duration
  - java.time.Instant
  - io.lettuce.core.CopyArgs
  - dev.naoh.lettucef.api.models._
  - io.lettuce.core.MigrateArgs
  - io.lettuce.core.RestoreArgs
  - io.lettuce.core.ScanArgs
  - io.lettuce.core.ScanCursor
  - io.lettuce.core.SortArgs

- underlying: RedisStreamAsyncCommands[K, V]
  output: StreamCommands
  methods:
  - fun: RedisFuture<Long> xack(K key, K group, String... messageIds);
  - fun: RedisFuture<String> xadd(K key, Map<K, V> body);
  - fun: RedisFuture<String> xadd(K key, XAddArgs args, Map<K, V> body);
  - fun: RedisFuture<String> xadd(K key, Object... keysAndValues);
  - fun: RedisFuture<String> xadd(K key, XAddArgs args, Object... keysAndValues);
  - fun: RedisFuture<ClaimedMessages<K, V>> xautoclaim(K key, XAutoClaimArgs<K> args);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xclaim(K key, Consumer<K> consumer, long minIdleTime, String... messageIds);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xclaim(K key, Consumer<K> consumer, XClaimArgs args, String... messageIds);
  - fun: RedisFuture<Long> xdel(K key, String... messageIds);
  - fun: RedisFuture<String> xgroupCreate(StreamOffset<K> streamOffset, K group);
  - fun: RedisFuture<String> xgroupCreate(StreamOffset<K> streamOffset, K group, XGroupCreateArgs args);
  - fun: RedisFuture<Boolean> xgroupCreateconsumer(K key, Consumer<K> consumer);
  - fun: RedisFuture<Long> xgroupDelconsumer(K key, Consumer<K> consumer);
  - fun: RedisFuture<Boolean> xgroupDestroy(K key, K group);
  - fun: RedisFuture<String> xgroupSetid(StreamOffset<K> streamOffset, K group);
  - fun: RedisFuture<List<Object>> xinfoStream(K key);
    dispatch:
      cType: XINFO
      args:
        - add(CommandKeyword.STREAM)
        - addKey(key)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<Object>> xinfoGroups(K key);
    dispatch:
      cType: XINFO
      args:
        - add(CommandKeyword.GROUPS)
        - addKey(key)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<Object>> xinfoConsumers(K key, K group);
    dispatch:
      cType: XINFO
      args:
        - add(CommandKeyword.CONSUMERS)
        - addKey(key)
        - addKey(group)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<Long> xlen(K key);
  - fun: RedisFuture<PendingMessages> xpending(K key, K group);
  - fun: RedisFuture<List<PendingMessage>> xpending(K key, K group, Range<String> range, Limit limit);
  - fun: RedisFuture<List<PendingMessage>> xpending(K key, Consumer<K> consumer, Range<String> range, Limit limit);
  - fun: RedisFuture<List<PendingMessage>> xpending(K key, XPendingArgs<K> args);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xrange(K key, Range<String> range);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xrange(K key, Range<String> range, Limit limit);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xread(StreamOffset<K>... streams);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xread(XReadArgs args, StreamOffset<K>... streams);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xreadgroup(Consumer<K> consumer, StreamOffset<K>... streams);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xreadgroup(Consumer<K> consumer, XReadArgs args, StreamOffset<K>... streams);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xrevrange(K key, Range<String> range);
  - fun: RedisFuture<List<StreamMessage<K, V>>> xrevrange(K key, Range<String> range, Limit limit);
  - fun: RedisFuture<Long> xtrim(K key, long count);
  - fun: RedisFuture<Long> xtrim(K key, boolean approximateTrimming, long count);
  - fun: RedisFuture<Long> xtrim(K key, XTrimArgs args);
  imports:
  - io.lettuce.core.Consumer
  - io.lettuce.core.Limit
  - io.lettuce.core.XAddArgs
  - io.lettuce.core.XAutoClaimArgs
  - io.lettuce.core.XClaimArgs
  - io.lettuce.core.XGroupCreateArgs
  - io.lettuce.core.XPendingArgs
  - io.lettuce.core.XReadArgs.StreamOffset
  - io.lettuce.core.XReadArgs
  - io.lettuce.core.XTrimArgs
  - dev.naoh.lettucef.api.models.stream._
  - dev.naoh.lettucef.api.models._

- underlying: RedisStringAsyncCommands[K, V]
  output: StringCommands
  methods:
  - fun: RedisFuture<Long> append(K key, V value);
  - fun: RedisFuture<Long> bitcount(K key);
  - fun: RedisFuture<Long> bitcount(K key, long start, long end);
  - fun: RedisFuture<List<Long>> bitfield(K key, BitFieldArgs bitFieldArgs);
  - fun: RedisFuture<Long> bitpos(K key, boolean state);
  - fun: RedisFuture<Long> bitpos(K key, boolean state, long start);
  - fun: RedisFuture<Long> bitpos(K key, boolean state, long start, long end);
  - fun: RedisFuture<Long> bitopAnd(K destination, K... keys);
  - fun: RedisFuture<Long> bitopNot(K destination, K source);
  - fun: RedisFuture<Long> bitopOr(K destination, K... keys);
  - fun: RedisFuture<Long> bitopXor(K destination, K... keys);
  - fun: RedisFuture<Long> decr(K key);
  - fun: RedisFuture<Long> decrby(K key, long amount);
  - fun: RedisFuture<V> get(K key);
    opt: [ nullable ]
  - fun: RedisFuture<Long> getbit(K key, long offset);
  - fun: RedisFuture<V> getdel(K key);
    opt: [ nullable ]
  - fun: RedisFuture<V> getex(K key, GetExArgs args);
    opt: [ nullable ]
  - fun: RedisFuture<V> getrange(K key, long start, long end);
  - fun: RedisFuture<V> getset(K key, V value);
    opt: [ nullable ]
  - fun: RedisFuture<Long> incr(K key);
  - fun: RedisFuture<Long> incrby(K key, long amount);
  - fun: RedisFuture<Double> incrbyfloat(K key, double amount);
  - fun: RedisFuture<List<KeyValue<K, V>>> mget(K... keys);
  - fun: RedisFuture<Long> mget(KeyValueStreamingChannel<K, V> channel, K... keys);
    opt: [ ignore ]
  - fun: RedisFuture<String> mset(Map<K, V> map);
  - fun: RedisFuture<Boolean> msetnx(Map<K, V> map);
  - fun: RedisFuture<String> set(K key, V value);
  - fun: RedisFuture<String> set(K key, V value, SetArgs setArgs);
    opt: [ nullable ]
  - fun: RedisFuture<V> setGet(K key, V value);
    opt: [ nullable ]
  - fun: RedisFuture<V> setGet(K key, V value, SetArgs setArgs);
    opt: [ nullable ]
  - fun: RedisFuture<Long> setbit(K key, long offset, int value);
  - fun: RedisFuture<String> setex(K key, long seconds, V value);
  - fun: RedisFuture<String> psetex(K key, long milliseconds, V value);
  - fun: RedisFuture<Boolean> setnx(K key, V value);
  - fun: RedisFuture<Long> setrange(K key, long offset, V value);
  - fun: RedisFuture<StringMatchResult> stralgoLcs(StrAlgoArgs strAlgoArgs);
  - fun: RedisFuture<Long> strlen(K key);
  imports:
  - io.lettuce.core.BitFieldArgs
  - io.lettuce.core.GetExArgs
  - io.lettuce.core.SetArgs
  - io.lettuce.core.StrAlgoArgs
  - io.lettuce.core.StringMatchResult

- underlying: BaseRedisAsyncCommands[K, V]
  output: BaseCommands
  methods:
  - fun: RedisFuture<Long> publish(K channel, V message);
  - fun: RedisFuture<List<K>> pubsubChannels();
  - fun: RedisFuture<List<K>> pubsubChannels(K channel);
  - fun: RedisFuture<Map<K, Long>> pubsubNumsub(K... channels);
  - fun: RedisFuture<Long> pubsubNumpat();
  - fun: RedisFuture<V> echo(V msg);
  - fun: RedisFuture<List<Object>> role();
    dispatch:
      cType: ROLE
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<String> ping();
  - fun: RedisFuture<String> readOnly();
  - fun: RedisFuture<String> readWrite();
  - fun: RedisFuture<String> quit();
  - fun: RedisFuture<Long> waitForReplication(int replicas, long timeout);
  imports:
  - dev.naoh.lettucef.api.models._

- underlying: RedisClusterAsyncCommands[K, V]
  output: ClusterCommands
  methods:
  - fun: RedisFuture<String> auth(CharSequence password);
  - fun: RedisFuture<String> auth(String username, CharSequence password);
  - fun: RedisFuture<String> clusterBumpepoch();
  - fun: RedisFuture<String> clusterMeet(String ip, int port);
  - fun: RedisFuture<String> clusterForget(String nodeId);
  - fun: RedisFuture<String> clusterAddSlots(int... slots);
  - fun: RedisFuture<String> clusterDelSlots(int... slots);
  - fun: RedisFuture<String> clusterSetSlotNode(int slot, String nodeId);
  - fun: RedisFuture<String> clusterSetSlotStable(int slot);
  - fun: RedisFuture<String> clusterSetSlotMigrating(int slot, String nodeId);
  - fun: RedisFuture<String> clusterSetSlotImporting(int slot, String nodeId);
  - fun: RedisFuture<String> clusterInfo();
  - fun: RedisFuture<String> clusterMyId();
  - fun: RedisFuture<String> clusterNodes();
  - fun: RedisFuture<List<String>> clusterSlaves(String nodeId);
  - fun: RedisFuture<List<K>> clusterGetKeysInSlot(int slot, int count);
  - fun: RedisFuture<Long> clusterCountKeysInSlot(int slot);
  - fun: RedisFuture<Long> clusterCountFailureReports(String nodeId);
  - fun: RedisFuture<Long> clusterKeyslot(K key);
  - fun: RedisFuture<String> clusterSaveconfig();
  - fun: RedisFuture<String> clusterSetConfigEpoch(long configEpoch);
  - fun: RedisFuture<List<Object>> clusterSlots();
    dispatch:
      cType: CLUSTER
      args:
      - add(CommandKeyword.SLOTS)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<String> asking();
  - fun: RedisFuture<String> clusterReplicate(String nodeId);
  - fun: RedisFuture<String> clusterFailover(boolean force);
  - fun: RedisFuture<String> clusterReset(boolean hard);
  - fun: RedisFuture<String> clusterFlushslots();
  imports:
  - io.lettuce.core.cluster.api.async.RedisClusterAsyncCommands
  - dev.naoh.lettucef.api.models._

- underlying: RedisHashAsyncCommands[K, V]
  output: HashCommands
  methods:
  - fun: RedisFuture<Long> hdel(K key, K... fields);
  - fun: RedisFuture<Boolean> hexists(K key, K field);
  - fun: RedisFuture<V> hget(K key, K field);
    opt: [ nullable ]
  - fun: RedisFuture<Long> hincrby(K key, K field, long amount);
  - fun: RedisFuture<Double> hincrbyfloat(K key, K field, double amount);
  - fun: RedisFuture<Map<K, V>> hgetall(K key);
  - fun: RedisFuture<Long> hgetall(KeyValueStreamingChannel<K, V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<List<K>> hkeys(K key);
  - fun: RedisFuture<Long> hkeys(KeyStreamingChannel<K> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<Long> hlen(K key);
  - fun: RedisFuture<List<KeyValue<K, V>>> hmget(K key, K... fields);
  - fun: RedisFuture<Long> hmget(KeyValueStreamingChannel<K, V> channel, K key, K... fields);
    opt: [ ignore ]
  - fun: RedisFuture<String> hmset(K key, Map<K, V> map);
  - fun: RedisFuture<K> hrandfield(K key);
    opt: [ nullable ]
  - fun: RedisFuture<List<K>> hrandfield(K key, long count);
  - fun: RedisFuture<KeyValue<K, V>> hrandfieldWithvalues(K key);
  - fun: RedisFuture<List<KeyValue<K, V>>> hrandfieldWithvalues(K key, long count);
  - fun: RedisFuture<MapScanCursor<K, V>> hscan(K key);
  - fun: RedisFuture<MapScanCursor<K, V>> hscan(K key, ScanArgs scanArgs);
  - fun: RedisFuture<MapScanCursor<K, V>> hscan(K key, ScanCursor scanCursor, ScanArgs scanArgs);
  - fun: RedisFuture<MapScanCursor<K, V>> hscan(K key, ScanCursor scanCursor);
  - fun: RedisFuture<StreamScanCursor> hscan(KeyValueStreamingChannel<K, V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> hscan(KeyValueStreamingChannel<K, V> channel, K key, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> hscan(KeyValueStreamingChannel<K, V> channel, K key, ScanCursor scanCursor, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> hscan(KeyValueStreamingChannel<K, V> channel, K key, ScanCursor scanCursor);
    opt: [ ignore ]
  - fun: RedisFuture<Boolean> hset(K key, K field, V value);
  - fun: RedisFuture<Long> hset(K key, Map<K, V> map);
  - fun: RedisFuture<Boolean> hsetnx(K key, K field, V value);
  - fun: RedisFuture<Long> hstrlen(K key, K field);
  - fun: RedisFuture<List<V>> hvals(K key);
  - fun: RedisFuture<Long> hvals(ValueStreamingChannel<V> channel, K key);
    opt: [ ignore ]
  imports:
  - dev.naoh.lettucef.api.models._
  - io.lettuce.core.ScanArgs
  - io.lettuce.core.ScanCursor

- underlying: RedisHLLAsyncCommands[K, V]
  output: HLLCommands
  methods:
  - fun: RedisFuture<Long> pfadd(K key, V... values);
  - fun: RedisFuture<String> pfmerge(K destkey, K... sourcekeys);
  - fun: RedisFuture<Long> pfcount(K... keys);
  imports: []

- underlying: RedisListAsyncCommands[K, V]
  output: ListCommands
  methods:
  - fun: RedisFuture<V> blmove(K source, K destination, LMoveArgs args, long timeout);
    opt: [ nullable ]
  - fun: RedisFuture<V> blmove(K source, K destination, LMoveArgs args, double timeout);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, V>> blpop(long timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, V>> blpop(double timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, V>> brpop(long timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, V>> brpop(double timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<V> brpoplpush(long timeout, K source, K destination);
    opt: [ nullable ]
  - fun: RedisFuture<V> brpoplpush(double timeout, K source, K destination);
    opt: [ nullable ]
  - fun: RedisFuture<V> lindex(K key, long index);
    opt: [ nullable ]
  - fun: RedisFuture<Long> linsert(K key, boolean before, V pivot, V value);
  - fun: RedisFuture<Long> llen(K key);
  - fun: RedisFuture<V> lmove(K source, K destination, LMoveArgs args);
    opt: [ nullable ]
  - fun: RedisFuture<V> lpop(K key);
    opt: [ nullable ]
  - fun: RedisFuture<List<V>> lpop(K key, long count);
  - fun: RedisFuture<Long> lpos(K key, V value);
    opt: [ nullable ]
  - fun: RedisFuture<Long> lpos(K key, V value, LPosArgs args);
    opt: [ nullable ]
  - fun: RedisFuture<List<Long>> lpos(K key, V value, int count);
  - fun: RedisFuture<List<Long>> lpos(K key, V value, int count, LPosArgs args);
  - fun: RedisFuture<Long> lpush(K key, V... values);
  - fun: RedisFuture<Long> lpushx(K key, V... values);
  - fun: RedisFuture<List<V>> lrange(K key, long start, long stop);
  - fun: RedisFuture<Long> lrange(ValueStreamingChannel<V> channel, K key, long start, long stop);
    opt: [ ignore ]
  - fun: RedisFuture<Long> lrem(K key, long count, V value);
  - fun: RedisFuture<String> lset(K key, long index, V value);
  - fun: RedisFuture<String> ltrim(K key, long start, long stop);
  - fun: RedisFuture<V> rpop(K key);
    opt: [ nullable ]
  - fun: RedisFuture<List<V>> rpop(K key, long count);
  - fun: RedisFuture<V> rpoplpush(K source, K destination);
    opt: [ nullable ]
  - fun: RedisFuture<Long> rpush(K key, V... values);
  - fun: RedisFuture<Long> rpushx(K key, V... values);
  imports:
  - io.lettuce.core.LMoveArgs
  - io.lettuce.core.LPosArgs

- underlying: RedisServerAsyncCommands[K, V]
  output: ServerCommands
  methods:
  - fun: RedisFuture<String> bgrewriteaof();
  - fun: RedisFuture<String> bgsave();
  - fun: RedisFuture<String> clientCaching(boolean enabled);
  - fun: RedisFuture<K> clientGetname();
  - fun: RedisFuture<Long> clientGetredir();
  - fun: RedisFuture<Long> clientId();
  - fun: RedisFuture<String> clientKill(String addr);
  - fun: RedisFuture<Long> clientKill(KillArgs killArgs);
  - fun: RedisFuture<String> clientList();
  - fun: RedisFuture<String> clientPause(long timeout);
  - fun: RedisFuture<String> clientSetname(K name);
  - fun: RedisFuture<String> clientTracking(TrackingArgs args);
  - fun: RedisFuture<Long> clientUnblock(long id, UnblockType type);
  - fun: RedisFuture<List<Object>> command();
    dispatch:
      cType: COMMAND
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<Long> commandCount();
  - fun: RedisFuture<List<Object>> commandInfo(String... commands);
    dispatch:
      cType: COMMAND
      args:
        - add(CommandType.INFO)
        - tap(a => commands.foreach(a.add))
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<Object>> commandInfo(CommandType... commands);
    opt: [ ignore ]
  - fun: RedisFuture<Map<String, String>> configGet(String parameter);
  - fun: RedisFuture<String> configResetstat();
  - fun: RedisFuture<String> configRewrite();
  - fun: RedisFuture<String> configSet(String parameter, String value);
  - fun: RedisFuture<Long> dbsize();
  - fun: RedisFuture<String> debugCrashAndRecover(Long delay);
  - fun: RedisFuture<String> debugHtstats(int db);
  - fun: RedisFuture<String> debugObject(K key);
  - fun: RedisFuture<String> debugReload();
  - fun: RedisFuture<String> debugRestart(Long delay);
  - fun: RedisFuture<String> debugSdslen(K key);
  - fun: RedisFuture<String> flushall();
  - fun: RedisFuture<String> flushall(FlushMode flushMode);
  - fun: RedisFuture<String> flushallAsync();
    opt: [ deprecated ]
  - fun: RedisFuture<String> flushdb();
  - fun: RedisFuture<String> flushdb(FlushMode flushMode);
  - fun: RedisFuture<String> flushdbAsync();
    opt: [ deprecated ]
  - fun: RedisFuture<String> info();
  - fun: RedisFuture<String> info(String section);
  - fun: RedisFuture<Date> lastsave();
  - fun: RedisFuture<Long> memoryUsage(K key);
  - fun: RedisFuture<String> save();
  - fun: RedisFuture<String> slaveof(String host, int port);
  - fun: RedisFuture<String> slaveofNoOne();
  - fun: RedisFuture<List<Object>> slowlogGet();
    dispatch:
      cType: SLOWLOG
      args:
        - add(CommandType.GET)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<Object>> slowlogGet(int count);
    dispatch:
      cType: SLOWLOG
      args:
        - add(CommandType.GET)
        - add(count)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<Long> slowlogLen();
  - fun: RedisFuture<String> slowlogReset();
  - fun: RedisFuture<List<V>> time();
  imports:
  - java.util.Date
  - io.lettuce.core.FlushMode
  - io.lettuce.core.KillArgs
  - io.lettuce.core.TrackingArgs
  - io.lettuce.core.UnblockType
  - io.lettuce.core.protocol.CommandType
  - dev.naoh.lettucef.api.models._
  - scala.util.chaining._

- underlying: RedisSetAsyncCommands[K, V]
  output: SetCommands
  methods:
  - fun: RedisFuture<Long> sadd(K key, V... members);
  - fun: RedisFuture<Long> scard(K key);
  - fun: RedisFuture<Set<V>> sdiff(K... keys);
  - fun: RedisFuture<Long> sdiff(ValueStreamingChannel<V> channel, K... keys);
    opt: [ ignore ]
  - fun: RedisFuture<Long> sdiffstore(K destination, K... keys);
  - fun: RedisFuture<Set<V>> sinter(K... keys);
  - fun: RedisFuture<Long> sinter(ValueStreamingChannel<V> channel, K... keys);
    opt: [ ignore ]
  - fun: RedisFuture<Long> sinterstore(K destination, K... keys);
  - fun: RedisFuture<Boolean> sismember(K key, V member);
  - fun: RedisFuture<Set<V>> smembers(K key);
  - fun: RedisFuture<Long> smembers(ValueStreamingChannel<V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<List<Boolean>> smismember(K key, V... members);
  - fun: RedisFuture<Boolean> smove(K source, K destination, V member);
  - fun: RedisFuture<V> spop(K key);
    opt: [ nullable ]
  - fun: RedisFuture<Set<V>> spop(K key, long count);
  - fun: RedisFuture<V> srandmember(K key);
    opt: [ nullable ]
  - fun: RedisFuture<List<V>> srandmember(K key, long count);
  - fun: RedisFuture<Long> srandmember(ValueStreamingChannel<V> channel, K key, long count);
    opt: [ ignore ]
  - fun: RedisFuture<Long> srem(K key, V... members);
  - fun: RedisFuture<Set<V>> sunion(K... keys);
  - fun: RedisFuture<Long> sunion(ValueStreamingChannel<V> channel, K... keys);
    opt: [ ignore ]
  - fun: RedisFuture<Long> sunionstore(K destination, K... keys);
  - fun: RedisFuture<ValueScanCursor<V>> sscan(K key);
  - fun: RedisFuture<ValueScanCursor<V>> sscan(K key, ScanArgs scanArgs);
  - fun: RedisFuture<ValueScanCursor<V>> sscan(K key, ScanCursor scanCursor, ScanArgs scanArgs);
  - fun: RedisFuture<ValueScanCursor<V>> sscan(K key, ScanCursor scanCursor);
  - fun: RedisFuture<StreamScanCursor> sscan(ValueStreamingChannel<V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> sscan(ValueStreamingChannel<V> channel, K key, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> sscan(ValueStreamingChannel<V> channel, K key, ScanCursor scanCursor, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> sscan(ValueStreamingChannel<V> channel, K key, ScanCursor scanCursor);
    opt: [ ignore ]
  imports:
  - io.lettuce.core.ScanArgs
  - io.lettuce.core.ScanCursor
  - dev.naoh.lettucef.api.models._

- underlying: RedisSortedSetAsyncCommands[K, V]
  output: SortedSetCommands
  methods:
  - fun: RedisFuture<KeyValue<K, ScoredValue<V>>> bzpopmin(long timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, ScoredValue<V>>> bzpopmin(double timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, ScoredValue<V>>> bzpopmax(long timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<KeyValue<K, ScoredValue<V>>> bzpopmax(double timeout, K... keys);
    opt: [ nullable ]
  - fun: RedisFuture<Long> zadd(K key, double score, V member);
  - fun: RedisFuture<Long> zadd(K key, Object... scoresAndValues);
  - fun: RedisFuture<Long> zadd(K key, ScoredValue<V>... scoredValues);
  - fun: RedisFuture<Long> zadd(K key, ZAddArgs zAddArgs, double score, V member);
  - fun: RedisFuture<Long> zadd(K key, ZAddArgs zAddArgs, Object... scoresAndValues);
  - fun: RedisFuture<Long> zadd(K key, ZAddArgs zAddArgs, ScoredValue<V>... scoredValues);
  - fun: RedisFuture<Double> zaddincr(K key, double score, V member);
    opt: [ nullable ]
  - fun: RedisFuture<Double> zaddincr(K key, ZAddArgs zAddArgs, double score, V member);
    opt: [ nullable ]
  - fun: RedisFuture<Long> zcard(K key);
  - fun: RedisFuture<Long> zcount(K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zcount(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zcount(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<V>> zdiff(K... keys);
  - fun: RedisFuture<Long> zdiffstore(K destKey, K... srcKeys);
  - fun: RedisFuture<List<ScoredValue<V>>> zdiffWithScores(K... keys);
  - fun: RedisFuture<Double> zincrby(K key, double amount, V member);
  - fun: RedisFuture<List<V>> zinter(K... keys);
  - fun: RedisFuture<List<V>> zinter(ZAggregateArgs aggregateArgs, K... keys);
  - fun: RedisFuture<List<ScoredValue<V>>> zinterWithScores(ZAggregateArgs aggregateArgs, K... keys);
  - fun: RedisFuture<List<ScoredValue<V>>> zinterWithScores(K... keys);
  - fun: RedisFuture<Long> zinterstore(K destination, K... keys);
  - fun: RedisFuture<Long> zinterstore(K destination, ZStoreArgs storeArgs, K... keys);
  - fun: RedisFuture<Long> zlexcount(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zlexcount(K key, Range<? extends V> range);
  - fun: RedisFuture<List<Double>> zmscore(K key, V... members);
    output:
      tpe: Seq[Option[Double]]
      j2s: _.asScala.toSeq.map(Option(_).map(Double2double))
  - fun: RedisFuture<ScoredValue<V>> zpopmin(K key);
  - fun: RedisFuture<List<ScoredValue<V>>> zpopmin(K key, long count);
  - fun: RedisFuture<ScoredValue<V>> zpopmax(K key);
  - fun: RedisFuture<List<ScoredValue<V>>> zpopmax(K key, long count);
  - fun: RedisFuture<V> zrandmember(K key);
    opt: [ nullable ]
  - fun: RedisFuture<List<V>> zrandmember(K key, long count);
  - fun: RedisFuture<ScoredValue<V>> zrandmemberWithScores(K key);
  - fun: RedisFuture<List<ScoredValue<V>>> zrandmemberWithScores(K key, long count);
  - fun: RedisFuture<List<V>> zrange(K key, long start, long stop);
  - fun: RedisFuture<Long> zrange(ValueStreamingChannel<V> channel, K key, long start, long stop);
    opt: [ ignore ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangeWithScores(K key, long start, long stop);
  - fun: RedisFuture<Long> zrangeWithScores(ScoredValueStreamingChannel<V> channel, K key, long start, long stop);
    opt: [ ignore ]
  - fun: RedisFuture<List<V>> zrangebylex(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebylex(K key, Range<? extends V> range);
  - fun: RedisFuture<List<V>> zrangebylex(K key, String min, String max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebylex(K key, Range<? extends V> range, Limit limit);
  - fun: RedisFuture<List<V>> zrangebyscore(K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebyscore(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebyscore(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<V>> zrangebyscore(K key, double min, double max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebyscore(K key, String min, String max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrangebyscore(K key, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, Range<? extends Number> range);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, double min, double max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, String min, String max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscore(ValueStreamingChannel<V> channel, K key, Range<? extends Number> range, Limit limit);
    opt: [ ignore ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, double min, double max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, String min, String max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrangebyscoreWithScores(K key, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, Range<? extends Number> range);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double min, double max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, String min, String max, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, Range<? extends Number> range, Limit limit);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrangestorebylex(K dstKey, K srcKey, Range<? extends V> range, Limit limit);
  - fun: RedisFuture<Long> zrangestorebyscore(K dstKey, K srcKey, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrank(K key, V member);
    opt: [ nullable ]
  - fun: RedisFuture<Long> zrem(K key, V... members);
  - fun: RedisFuture<Long> zremrangebylex(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zremrangebylex(K key, Range<? extends V> range);
  - fun: RedisFuture<Long> zremrangebyrank(K key, long start, long stop);
  - fun: RedisFuture<Long> zremrangebyscore(K key, double min, double max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zremrangebyscore(K key, String min, String max);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zremrangebyscore(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<V>> zrevrange(K key, long start, long stop);
  - fun: RedisFuture<Long> zrevrange(ValueStreamingChannel<V> channel, K key, long start, long stop);
    opt: [ ignore ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangeWithScores(K key, long start, long stop);
  - fun: RedisFuture<Long> zrevrangeWithScores(ScoredValueStreamingChannel<V> channel, K key, long start, long stop);
    opt: [ ignore ]
  - fun: RedisFuture<List<V>> zrevrangebylex(K key, Range<? extends V> range);
  - fun: RedisFuture<List<V>> zrevrangebylex(K key, Range<? extends V> range, Limit limit);
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, double max, double min);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, String max, String min);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, double max, double min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, String max, String min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<V>> zrevrangebyscore(K key, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, double max, double min);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, String max, String min);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, Range<? extends Number> range);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, double max, double min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, String max, String min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscore(ValueStreamingChannel<V> channel, K key, Range<? extends Number> range, Limit limit);
    opt: [ ignore ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, double max, double min);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, String max, String min);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, Range<? extends Number> range);
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, double max, double min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, String max, String min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<List<ScoredValue<V>>> zrevrangebyscoreWithScores(K key, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double max, double min);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, String max, String min);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, Range<? extends Number> range);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double max, double min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, String max, String min, long offset, long count);
    opt: [ deprecated ]
  - fun: RedisFuture<Long> zrevrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, Range<? extends Number> range, Limit limit);
    opt: [ ignore ]
  - fun: RedisFuture<Long> zrevrangestorebylex(K dstKey, K srcKey, Range<? extends V> range, Limit limit);
  - fun: RedisFuture<Long> zrevrangestorebyscore(K dstKey, K srcKey, Range<? extends Number> range, Limit limit);
  - fun: RedisFuture<Long> zrevrank(K key, V member);
    opt: [ nullable ]
  - fun: RedisFuture<ScoredValueScanCursor<V>> zscan(K key);
  - fun: RedisFuture<ScoredValueScanCursor<V>> zscan(K key, ScanArgs scanArgs);
  - fun: RedisFuture<ScoredValueScanCursor<V>> zscan(K key, ScanCursor scanCursor, ScanArgs scanArgs);
  - fun: RedisFuture<ScoredValueScanCursor<V>> zscan(K key, ScanCursor scanCursor);
  - fun: RedisFuture<StreamScanCursor> zscan(ScoredValueStreamingChannel<V> channel, K key);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> zscan(ScoredValueStreamingChannel<V> channel, K key, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> zscan(ScoredValueStreamingChannel<V> channel, K key, ScanCursor scanCursor, ScanArgs scanArgs);
    opt: [ ignore ]
  - fun: RedisFuture<StreamScanCursor> zscan(ScoredValueStreamingChannel<V> channel, K key, ScanCursor scanCursor);
    opt: [ ignore ]
  - fun: RedisFuture<Double> zscore(K key, V member);
    opt: [ nullable ]
  - fun: RedisFuture<List<V>> zunion(K... keys);
  - fun: RedisFuture<List<V>> zunion(ZAggregateArgs aggregateArgs, K... keys);
  - fun: RedisFuture<List<ScoredValue<V>>> zunionWithScores(ZAggregateArgs aggregateArgs, K... keys);
  - fun: RedisFuture<List<ScoredValue<V>>> zunionWithScores(K... keys);
  - fun: RedisFuture<Long> zunionstore(K destination, K... keys);
  - fun: RedisFuture<Long> zunionstore(K destination, ZStoreArgs storeArgs, K... keys);
  imports:
  - io.lettuce.core.Limit
  - io.lettuce.core.ZStoreArgs
  - io.lettuce.core.ZAddArgs
  - io.lettuce.core.ZAggregateArgs
  - io.lettuce.core.ScanCursor
  - io.lettuce.core.ScanArgs
  - dev.naoh.lettucef.api.models._

- underlying: RedisGeoAsyncCommands[K, V]
  output: GeoCommands
  methods:
  - fun: RedisFuture<Long> geoadd(K key, double longitude, double latitude, V member);
  - fun: RedisFuture<Long> geoadd(K key, double longitude, double latitude, V member, GeoAddArgs args);
  - fun: RedisFuture<Long> geoadd(K key, Object... lngLatMember);
  - fun: RedisFuture<Long> geoadd(K key, GeoValue<V>... values);
  - fun: RedisFuture<Long> geoadd(K key, GeoAddArgs args, Object... lngLatMember);
  - fun: RedisFuture<Long> geoadd(K key, GeoAddArgs args, GeoValue<V>... values);
  - fun: RedisFuture<Double> geodist(K key, V from, V to, GeoArgs.Unit unit);
    opt: [ nullable ]
  - fun: RedisFuture<List<Value<String>>> geohash(K key, V... members);
  - fun: RedisFuture<List<GeoCoordinates>> geopos(K key, V... members);
  - fun: RedisFuture<Set<V>> georadius(K key, double longitude, double latitude, double distance, GeoArgs.Unit unit);
  - fun: RedisFuture<List<GeoWithin<V>>> georadius(K key, double longitude, double latitude, double distance, GeoArgs.Unit unit, GeoArgs geoArgs);
  - fun: RedisFuture<Long> georadius(K key, double longitude, double latitude, double distance, GeoArgs.Unit unit, GeoRadiusStoreArgs<K> geoRadiusStoreArgs);
  - fun: RedisFuture<Set<V>> georadiusbymember(K key, V member, double distance, GeoArgs.Unit unit);
  - fun: RedisFuture<List<GeoWithin<V>>> georadiusbymember(K key, V member, double distance, GeoArgs.Unit unit, GeoArgs geoArgs);
  - fun: RedisFuture<Long> georadiusbymember(K key, V member, double distance, GeoArgs.Unit unit, GeoRadiusStoreArgs<K> geoRadiusStoreArgs);
  - fun: RedisFuture<Set<V>> geosearch(K key, GeoSearch.GeoRef<K> reference, GeoSearch.GeoPredicate predicate);
  - fun: RedisFuture<List<GeoWithin<V>>> geosearch(K key, GeoSearch.GeoRef<K> reference, GeoSearch.GeoPredicate predicate, GeoArgs geoArgs);
  - fun: RedisFuture<Long> geosearchstore(K destination, K key, GeoSearch.GeoRef<K> reference, GeoSearch.GeoPredicate predicate, GeoArgs geoArgs, boolean storeDist);
  imports:
  - io.lettuce.core.GeoAddArgs
  - io.lettuce.core.GeoArgs
  - io.lettuce.core.GeoCoordinates
  - io.lettuce.core.GeoRadiusStoreArgs
  - io.lettuce.core.GeoSearch
  - io.lettuce.core.GeoValue
  - dev.naoh.lettucef.api.models.geo._

- underlying: RedisAclAsyncCommands[K, V]
  output: AclCommands
  methods:
  - fun: RedisFuture<Set<AclCategory>> aclCat();
  - fun: RedisFuture<Set<CommandType>> aclCat(AclCategory category);
  - fun: RedisFuture<Long> aclDeluser(String... usernames);
  - fun: RedisFuture<String> aclGenpass();
  - fun: RedisFuture<String> aclGenpass(int bits);
  - fun: RedisFuture<List<Object>> aclGetuser(String username);
    dispatch:
      cType: ACL
      args:
      - add(CommandKeyword.GETUSER)
      - add(username)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<String>> aclList();
  - fun: RedisFuture<String> aclLoad();
  - fun: RedisFuture<List<Map<String, Object>>> aclLog();
    dispatch:
      cType: ACL
      args:
      - add(CommandKeyword.LOG)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<List<Map<String, Object>>> aclLog(int count);
    dispatch:
      cType: ACL
      args:
      - add(CommandKeyword.LOG)
      - add(count)
      parse: RedisData[V]
      output: List[RedisData[V]]
      postfix: _.asList
  - fun: RedisFuture<String> aclLogReset();
  - fun: RedisFuture<String> aclSave();
  - fun: RedisFuture<String> aclSetuser(String username, AclSetuserArgs setuserArgs);
  - fun: RedisFuture<List<String>> aclUsers();
  - fun: RedisFuture<String> aclWhoami();
  imports:
  - io.lettuce.core.AclCategory
  - io.lettuce.core.AclSetuserArgs
  - io.lettuce.core.protocol.CommandType
  - dev.naoh.lettucef.api.models._

- underlying: RedisSentinelAsyncCommands[K, V]
  output: SentinelCommands
  methods:
  - fun: RedisFuture<SocketAddress> getMasterAddrByName(K key);
  - fun: RedisFuture<List<Map<K, V>>> masters();
  - fun: RedisFuture<Map<K, V>> master(K key);
  - fun: RedisFuture<List<Map<K, V>>> slaves(K key);
  - fun: RedisFuture<Long> reset(K key);
  - fun: RedisFuture<String> failover(K key);
  - fun: RedisFuture<String> monitor(K key, String ip, int port, int quorum);
  - fun: RedisFuture<String> set(K key, String option, V value);
  - fun: RedisFuture<String> remove(K key);
  - fun: RedisFuture<K> clientGetname();
  - fun: RedisFuture<String> clientSetname(K name);
  - fun: RedisFuture<String> clientKill(String addr);
  - fun: RedisFuture<Long> clientKill(KillArgs killArgs);
  - fun: RedisFuture<String> clientPause(long timeout);
  - fun: RedisFuture<String> clientList();
  - fun: RedisFuture<String> info();
  - fun: RedisFuture<String> info(String section);
  - fun: RedisFuture<String> ping();
  imports:
  - java.net.SocketAddress
  - io.lettuce.core.KillArgs
  - io.lettuce.core.sentinel.api.async.RedisSentinelAsyncCommands

- underlying: RedisScriptingAsyncCommands[K, V]
  output: ScriptingCommands
  methods:
# - fun: RedisFuture<T> eval(String script, ScriptOutputType type, K... keys);
# - fun: RedisFuture<T> eval(byte[] script, ScriptOutputType type, K... keys);
# - fun: RedisFuture<T> eval(String script, ScriptOutputType type, K[] keys, V... values);
# - fun: RedisFuture<T> eval(byte[] script, ScriptOutputType type, K[] keys, V... values);
# - fun: RedisFuture<T> evalsha(String digest, ScriptOutputType type, K... keys);
# - fun: RedisFuture<T> evalsha(String digest, ScriptOutputType type, K[] keys, V... values);
  - fun: RedisFuture<List<Boolean>> scriptExists(String... digests);
  - fun: RedisFuture<String> scriptFlush();
  - fun: RedisFuture<String> scriptFlush(FlushMode flushMode);
  - fun: RedisFuture<String> scriptKill();
  - fun: RedisFuture<String> scriptLoad(String script);
  - fun: RedisFuture<String> scriptLoad(byte[] script);
  imports:
  - io.lettuce.core.FlushMode


- underlying: RedisTransactionalAsyncCommands[K, V]
  output: TransactionCommands
  methods:
  - fun: RedisFuture<String> discard();
  - fun: RedisFuture<TransactionResult> exec();
    output:
      tpe: Boolean
      j2s: "!_.wasDiscarded()"
  - fun: RedisFuture<String> multi();
  - fun: RedisFuture<String> watch(K... keys);
  - fun: RedisFuture<String> unwatch();
  imports: []
